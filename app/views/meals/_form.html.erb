<%= gather_form_for(meal) do |f| %>
  <%= base_error(f) %>

  <%= meal.form_section(:general) do %>
    <div class="fields">
      <% if policy(meal).change_date_loc_invites? %>
        <%= f.input :served_at, as: :datetime_picker, include_day_of_week: true,
          input_html: {data: {date_options: @min_date.present? ? {minDate: @min_date} : {}}} %>
        <%= f.input :resource_ids, collection: @resource_options, label_method: :name_with_prefix,
          required: true, input_html: { multiple: "multiple" } %>
      <% else %>
        <%= f.input :served_at do %>
          <%= meal.served_at_datetime %>
        <% end %>
        <%= f.input :resource_ids do %>
          <%= meal.location_name %>
        <% end %>
      <% end %>

      <% if multi_community? %>
        <% if policy(meal).change_menu? %>
          <div class="form-group text optional
            <%= meal.errors[:invitations].present? ? "has-error" : "" %>">
            <label class="text optional col-sm-3 control-label" for="meal_invitations">Communities</label>
            <div class="boxes col-sm-9">
              <% @communities.each do |c| %>
                <% checked = meal.community_invited?(c) %>
                <% disabled = meal.disable_community_checkbox?(c) %>
                <%= check_box_tag("meal[community_boxes][#{c.id}]", "1", checked, disabled: disabled) %>
                <%= hidden_field_tag("meal[community_boxes][#{c.id}]", "1") if disabled %>
                <%= label_tag("meal[community_boxes][#{c.id}]", c.name) %>
                &nbsp;&nbsp;
              <% end %>
            </div>
            <% if meal.errors[:invitations].present? %>
              <div class="error col-sm-6 col-sm-offset-2"><%= meal.errors[:invitations].join %></div>
            <% end %>
          </div>
        <% else %>
          <%= f.input :communities do %>
            <%= meal.communities.map(&:name).join(", ") %>
          <% end %>
        <% end %>
      <% end %>

      <% if policy(meal).change_capacity? %>
        <%= f.input :capacity, min: 1 %>
      <% else %>
        <%= f.input :capacity do %><%= meal.capacity %><% end %>
      <% end %>

      <% if policy(meal).change_formula? %>
        <%= f.input :formula_id, collection: @formula_options %>
      <% else %>
        <%= f.input :formula_id do %><%= meal.formula_name %><% end %>
      <% end %>
    </div>
  <% end %>

  <%= meal.form_section(:workers) do %>
    <div id="assignment-fields">
      <%= user_nested_field_set(f, :head_cook_assign, multiple: false, context: "meal_assign") %>
      <% meal.extra_roles.each do |role| %>
        <%= user_nested_field_set(f, :"#{role}_assigns", context: "meal_assign") %>
      <% end %>
    </div>
  <% end %>

  <%= meal.form_section(:menu) do %>
    <% ([:title] + Meal::MENU_ITEMS).each do |attrib| %>
      <% if policy(meal).change_menu? %>
        <%= f.input attrib, as: (:markdown unless attrib == :title) %>
      <% else %>
        <%= f.input attrib do %><%= (a = f.object[attrib]) ? a : "[None]" %><% end %>
      <% end %>
    <% end %>

    <div class="form-group text optional meal_allergens
      <%= meal.errors[:allergens].present? ? "has-error" : "" %>">
      <label class="text optional col-sm-3 control-label" for="meal_allergens">Allergens</label>
      <div class="boxes col-sm-9">
        <% sorted_allergens.each do |allergen| %>
          <div>
            <%= f.check_box("allergen_#{allergen}", disabled: !policy(meal).change_menu?) %>
            <%= f.label("allergen_#{allergen}")%>
          </div>
        <% end %>
      </div>
      <% if meal.errors[:allergens].present? %>
        <div class="error col-sm-9 col-sm-offset-3"><%= meal.errors[:allergens].join %></div>
      <% end %>
    </div>
  <% end %>

  <%# Unlike some of the above, we don't show any of this unless the user can change it. %>
  <% if policy(meal).change_expenses? %>
    <% cost = meal.cost %>
    <%= meal.form_section(:expenses) do %>
      <%= f.simple_fields_for(:cost) do |mc_form| %>
        <%= mc_form.input(:ingredient_cost, input_html: {value: cost.two_decimals(:ingredient)}) %>
        <%= mc_form.input(:pantry_cost, input_html: {value: cost.two_decimals(:pantry)}) %>
        <%= mc_form.input(:payment_method, collection: Meals::Cost::PAYMENT_METHODS, as: :radio_buttons) %>
      <% end %>
    <% end %>
  <% end %>

  <%= form_actions do %>
    <%= f.button :submit, class: "btn-primary" %>
  <% end %>
<% end %>

<%= javascript_tag do %>
  $(function() {
    new Gather.Views.Select2View({el: ".meal-form"});
    $("#meal_resource_ids").select2();
    new Gather.Views.DirtyChecker({el: '.meal-form'});
    <% unless policy(meal).change_workers_without_notification? %>
      new Gather.Views.WorkerChangeNotificationView({el: '#assignment-fields'});
    <% end %>
  });
<% end %>
